<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xpwi.springboot.mbg.mapper.ScheduleMapper">
  <resultMap id="BaseResultMap" type="com.xpwi.springboot.mbg.model.Schedule">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="launch_uid" jdbcType="INTEGER" property="launchUid" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="repeat_uuid" jdbcType="VARCHAR" property="repeatUuid" />
    <result column="meeting_room" jdbcType="INTEGER" property="meetingRoom" />
    <result column="begin_unix" jdbcType="INTEGER" property="beginUnix" />
    <result column="end_unix" jdbcType="INTEGER" property="endUnix" />
    <result column="notify_unix" jdbcType="INTEGER" property="notifyUnix" />
    <result column="is_deleted" jdbcType="BIT" property="isDeleted" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="title" jdbcType="VARCHAR" property="title" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, launch_uid, type, repeat_uuid, meeting_room, begin_unix, end_unix, notify_unix, 
    is_deleted, content, created_at, updated_at, title
  </sql>
  <select id="selectByExample" parameterType="com.xpwi.springboot.mbg.model.ScheduleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from schedule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from schedule
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from schedule
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xpwi.springboot.mbg.model.ScheduleExample">
    delete from schedule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xpwi.springboot.mbg.model.Schedule">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into schedule (launch_uid, type, repeat_uuid, 
      meeting_room, begin_unix, end_unix, 
      notify_unix, is_deleted, content, 
      created_at, updated_at, title
      )
    values (#{launchUid,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, #{repeatUuid,jdbcType=VARCHAR}, 
      #{meetingRoom,jdbcType=INTEGER}, #{beginUnix,jdbcType=INTEGER}, #{endUnix,jdbcType=INTEGER}, 
      #{notifyUnix,jdbcType=INTEGER}, #{isDeleted,jdbcType=BIT}, #{content,jdbcType=VARCHAR}, 
      #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, #{title,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.xpwi.springboot.mbg.model.Schedule">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into schedule
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="launchUid != null">
        launch_uid,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="repeatUuid != null">
        repeat_uuid,
      </if>
      <if test="meetingRoom != null">
        meeting_room,
      </if>
      <if test="beginUnix != null">
        begin_unix,
      </if>
      <if test="endUnix != null">
        end_unix,
      </if>
      <if test="notifyUnix != null">
        notify_unix,
      </if>
      <if test="isDeleted != null">
        is_deleted,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="title != null">
        title,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="launchUid != null">
        #{launchUid,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="repeatUuid != null">
        #{repeatUuid,jdbcType=VARCHAR},
      </if>
      <if test="meetingRoom != null">
        #{meetingRoom,jdbcType=INTEGER},
      </if>
      <if test="beginUnix != null">
        #{beginUnix,jdbcType=INTEGER},
      </if>
      <if test="endUnix != null">
        #{endUnix,jdbcType=INTEGER},
      </if>
      <if test="notifyUnix != null">
        #{notifyUnix,jdbcType=INTEGER},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=BIT},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xpwi.springboot.mbg.model.ScheduleExample" resultType="java.lang.Long">
    select count(*) from schedule
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update schedule
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.launchUid != null">
        launch_uid = #{record.launchUid,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.repeatUuid != null">
        repeat_uuid = #{record.repeatUuid,jdbcType=VARCHAR},
      </if>
      <if test="record.meetingRoom != null">
        meeting_room = #{record.meetingRoom,jdbcType=INTEGER},
      </if>
      <if test="record.beginUnix != null">
        begin_unix = #{record.beginUnix,jdbcType=INTEGER},
      </if>
      <if test="record.endUnix != null">
        end_unix = #{record.endUnix,jdbcType=INTEGER},
      </if>
      <if test="record.notifyUnix != null">
        notify_unix = #{record.notifyUnix,jdbcType=INTEGER},
      </if>
      <if test="record.isDeleted != null">
        is_deleted = #{record.isDeleted,jdbcType=BIT},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=VARCHAR},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.title != null">
        title = #{record.title,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update schedule
    set id = #{record.id,jdbcType=INTEGER},
      launch_uid = #{record.launchUid,jdbcType=INTEGER},
      type = #{record.type,jdbcType=INTEGER},
      repeat_uuid = #{record.repeatUuid,jdbcType=VARCHAR},
      meeting_room = #{record.meetingRoom,jdbcType=INTEGER},
      begin_unix = #{record.beginUnix,jdbcType=INTEGER},
      end_unix = #{record.endUnix,jdbcType=INTEGER},
      notify_unix = #{record.notifyUnix,jdbcType=INTEGER},
      is_deleted = #{record.isDeleted,jdbcType=BIT},
      content = #{record.content,jdbcType=VARCHAR},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      title = #{record.title,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xpwi.springboot.mbg.model.Schedule">
    update schedule
    <set>
      <if test="launchUid != null">
        launch_uid = #{launchUid,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="repeatUuid != null">
        repeat_uuid = #{repeatUuid,jdbcType=VARCHAR},
      </if>
      <if test="meetingRoom != null">
        meeting_room = #{meetingRoom,jdbcType=INTEGER},
      </if>
      <if test="beginUnix != null">
        begin_unix = #{beginUnix,jdbcType=INTEGER},
      </if>
      <if test="endUnix != null">
        end_unix = #{endUnix,jdbcType=INTEGER},
      </if>
      <if test="notifyUnix != null">
        notify_unix = #{notifyUnix,jdbcType=INTEGER},
      </if>
      <if test="isDeleted != null">
        is_deleted = #{isDeleted,jdbcType=BIT},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xpwi.springboot.mbg.model.Schedule">
    update schedule
    set launch_uid = #{launchUid,jdbcType=INTEGER},
      type = #{type,jdbcType=INTEGER},
      repeat_uuid = #{repeatUuid,jdbcType=VARCHAR},
      meeting_room = #{meetingRoom,jdbcType=INTEGER},
      begin_unix = #{beginUnix,jdbcType=INTEGER},
      end_unix = #{endUnix,jdbcType=INTEGER},
      notify_unix = #{notifyUnix,jdbcType=INTEGER},
      is_deleted = #{isDeleted,jdbcType=BIT},
      content = #{content,jdbcType=VARCHAR},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      title = #{title,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>